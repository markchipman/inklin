# The main structure is a normal Kubernetes secret
apiVersion: v1
kind: Secret
metadata:
  # Every event has an automatically generated name. The main requirement of
  # this is that it MUST BE UNIQUE.
  name: example
  # Brigade uses several labels to determine whether a secret carries a
  # Brigade event.
  labels:
    # 'heritage: brigade' is mandatory, and signals that this is a Brigade event.
    heritage: brigade

    # This should point to the Brigade project ID in which this event is to be
    # executed
    project: brigade-1234567890

    # This MUST be a unique ID. Where possible, it SHOULD be a ULID
    # Substituting a UUID is fine, though some sorting functions won't be as
    # expected. (A UUID v1 will be sortable like ULIDs, but longer).
    build: 01C1R2SYTYAR2WQ2DKNTW8SH08

    # 'component: build' is REQUIRED and tells brigade to create a new build
    # record (and trigger a new worker run).
    component: build

    # Any other labels you add will be ignored by Brigade.
type: brigade.sh/build
data:
  # IMPORTANT: We show these fields as clear text, but they MUST be base-64
  # encoded.

  # The name of the thing that caused this event.
  event_provider: github

  # The type of event. This field is freeform. Brigade does not have a list of
  # pre-approved event names. Thus, you can define your own event_type
  event_type: push

  # Revision describes a vcs revision.
  revision:

    # Commit is the commitish/reference for any associated VCS repository. By
    # default, this should be `master` for Git.
    commit: 6913b2703df943fed7a135b671f3efdafd92dbf3

    # Ref is the symbolic ref name. (refs/heads/master, refs/pull/12/head, refs/tags/v0.1.0)
    ref: master

  # This should be the same as the `name` field on the secret
  build_name: example

  # This should be the same as the 'project' label
  project_id: brigade-1234567890

  # This should be the same as the 'build' label
  build_id: 01C1R2SYTYAR2WQ2DKNTW8SH08

  # The payload can contain arbitrary data that will be passed to the worker
  # JavaScript. It is passed to the script unparsed, and the script can parse
  # it as desired.
  payload: "{ 'foo': 'bar' }"

  # An event can supply a script to execute. If it does not supply a script,
  # Brigade will try to locate a 'brigade.js' file in the project's source
  # code repository using the commit provided above.
  script: "console.log('hello');"
